generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========= MODELOS PRINCIPAIS =========

model Product {
  id               Int      @id @default(autoincrement())
  name             String
  sku              String?  @unique
  description      String?
  unit             String?
  status           String   @default("ATIVO")
  stockQuantity    Int
  minStockQuantity Int      @default(0)
  costPrice        Float?
  location         String?
  mainImageUrl     String?
  videoUrl         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId Int?

  images    ProductImage[]
  movements StockMovement[]
}

model StockMovement {
  id                  Int      @id @default(autoincrement())
  type                String
  quantity            Int
  details             String?
  relatedParty        String?
  unitPriceAtMovement Float?
  notes               String?
  document            String?
  createdAt           DateTime @default(now())

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model AccountPayable {
  id       Int      @id @default(autoincrement())
  name     String
  category String
  value    Float
  dueDate  DateTime
  status   String   @default("A_PAGAR")

  installmentType    String @default("UNICA") // UNICA ou PARCELADO
  installments       Int?
  currentInstallment Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isRecurring       Boolean          @default(false)
  recurringUntil    DateTime?
  recurringSourceId Int?
  recurringSource   AccountPayable?  @relation("RecurringLink", fields: [recurringSourceId], references: [id])
  recurringChildren AccountPayable[] @relation("RecurringLink")

  payments Payment[]

  // ‚ñ∂ √çndices para acelerar /summary, listagem e relat√≥rios
  @@index([dueDate])
  @@index([status, dueDate])
  @@index([category, dueDate])
}

model Payment {
  id          Int            @id @default(autoincrement())
  accountId   Int
  account     AccountPayable @relation(fields: [accountId], references: [id])
  paidAt      DateTime
  amount      Float?
  createdAt   DateTime       @default(now())
  bankAccount String?

  // ‚ñ∂ √çndices para consultas de hist√≥rico/duplicidade
  @@index([accountId])
  @@index([paidAt])
  @@index([accountId, paidAt, amount])
}

// ========= MODELOS DE SUPORTE =========

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      String   @default("USER")
  modules   String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movements StockMovement[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[]
}

model Supplier {
  id    Int     @id @default(autoincrement())
  name  String
  cnpj  String? @unique
  phone String?
  email String? @unique

  products Product[]
}

model Contact {
  id      Int     @id @default(autoincrement())
  name    String
  company String?
  email   String? @unique
  phone   String?
  type    String  @default("Cliente")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model TravelExpense {
  id           Int       @id @default(autoincrement())
  employeeName String?
  department   String?
  description  String?
  category     String    @default("OUTROS") // TRANSPORTE | HOSPEDAGEM | ALIMENTACAO | OUTROS
  city         String?
  state        String?
  expenseDate  DateTime?
  currency     String?   @default("BRL")

  // valores em CENTAVOS para evitar arredondamento no SQLite
  amountCents     Int
  reimbursedCents Int @default(0)

  status     String   @default("PENDENTE") // PENDENTE | PARCIAL | REEMBOLSADO
  receiptUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  reimbursements TravelReimbursement[]
  advances       TravelAdvance[] // << novo
  returns        TravelReturn[] // << novo

  @@index([expenseDate])
  @@index([status, category])
  @@index([employeeName])
}

model TravelReimbursement {
  id              Int           @id @default(autoincrement())
  travelExpenseId Int
  travelExpense   TravelExpense @relation(fields: [travelExpenseId], references: [id], onDelete: Cascade)

  // valor do reembolso em CENTAVOS
  amountCents  Int
  reimbursedAt DateTime @default(now())
  bankAccount  String?
  notes        String?
  createdAt    DateTime @default(now())
}

// ========= NOVOS MODELOS =========

model TravelAdvance {
  id              Int           @id @default(autoincrement())
  travelExpenseId Int
  travelExpense   TravelExpense @relation(fields: [travelExpenseId], references: [id], onDelete: Cascade)

  amountCents Int
  issuedAt    DateTime @default(now())
  method      String?
  notes       String?
  createdAt   DateTime @default(now())

  @@index([travelExpenseId])
}

model TravelReturn {
  id              Int           @id @default(autoincrement())
  travelExpenseId Int
  travelExpense   TravelExpense @relation(fields: [travelExpenseId], references: [id], onDelete: Cascade)

  amountCents Int
  returnedAt  DateTime @default(now())
  method      String?
  notes       String?
  createdAt   DateTime @default(now())

  @@index([travelExpenseId])
}

// ========= NOVOS MODELOS (CONTRATOS & RECEBIDOS) =========

model Municipality {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  cnpj      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  departments Department[]
  contracts   Contract[]
}

model Department {
  id             Int          @id @default(autoincrement())
  name           String
  municipalityId Int
  municipality   Municipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)

  contracts Contract[]

  @@unique([municipalityId, name]) // evita √≥rg√£os duplicados na mesma prefeitura
  @@index([municipalityId])
}

model Contract {
  id             Int       @id @default(autoincrement())
  code           String
  description    String?
  municipalityId Int
  departmentId   Int?
  startDate      DateTime?
  endDate        DateTime?
  monthlyValue   Float?
  status         String    @default("ATIVO")
  signedAt       DateTime?
  processNumber  String?
  active         Boolean   @default(true)

  // ‚¨áÔ∏è novo
  attachmentUrl  String?   // URL p√∫blica para o PDF do contrato

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  municipality Municipality @relation(fields: [municipalityId], references: [id])
  department   Department?  @relation(fields: [departmentId], references: [id])

  receivables Receivable[]

  @@unique([municipalityId, code])
  @@index([municipalityId])
  @@index([departmentId])
  @@index([endDate])
}


model Receivable {
  id           Int       @id @default(autoincrement())
  noteNumber   String?
  issueDate    DateTime?
  grossAmount  Float?
  netAmount    Float?
  periodLabel  String? // Ex.: "AGOSTO/2025"
  periodStart  DateTime?
  periodEnd    DateTime?
  deliveryDate DateTime?
  receivedAt   DateTime?
  status       String    @default("A_RECEBER") // A_RECEBER | ATRASADO | RECEBIDO
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  contractId Int
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@index([issueDate])
  @@index([status])
}

// ========= NFE IMPORTS (NOVO) =========

model NfeImport {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  rawXmlPath  String
  accessKey   String?   @unique
  number      String?
  series      String?
  issueDate   DateTime?
  emitterCnpj String?
  emitterName String?
  destCnpj    String?
  destName    String?
  totalAmount Float?

  // üëá novo
  pdfPath String?

  items NfeItem[]

  @@index([issueDate])
  @@index([emitterCnpj, issueDate])
  @@index([destCnpj, issueDate])
}

model NfeItem {
  id          Int       @id @default(autoincrement())
  nfeImportId Int
  nfeImport   NfeImport @relation(fields: [nfeImportId], references: [id], onDelete: Cascade)

  productCode String?
  description String?
  quantity    Float?
  unit        String?
  unitPrice   Float?
  total       Float?

  @@index([nfeImportId])
}
